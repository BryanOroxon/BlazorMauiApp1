@page "/tictactoe"

<h3 class="embedded-style">Welcome to </h3>

<style>
	.embedded-style::after {
		background-color: #000000;
		background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2000 1500'%3E%3Cdefs%3E%3Crect fill='none' stroke-width='169.7' id='a' x='-400' y='-300' width='800' height='600'/%3E%3C/defs%3E%3Cg transform='scale(0.829)' style='transform-origin:center'%3E%3Cg transform='rotate(16.2 0 0)' style='transform-origin:center'%3E%3Cg transform='rotate(-160 0 0)' style='transform-origin:center'%3E%3Cg transform='translate(1000 750)'%3E%3Cuse stroke='%23000' href='%23a' transform='rotate(10 0 0) scale(1.1)'/%3E%3Cuse stroke='%23000011' href='%23a' transform='rotate(20 0 0) scale(1.2)'/%3E%3Cuse stroke='%23000022' href='%23a' transform='rotate(30 0 0) scale(1.3)'/%3E%3Cuse stroke='%23000033' href='%23a' transform='rotate(40 0 0) scale(1.4)'/%3E%3Cuse stroke='%23000044' href='%23a' transform='rotate(50 0 0) scale(1.5)'/%3E%3Cuse stroke='%23000055' href='%23a' transform='rotate(60 0 0) scale(1.6)'/%3E%3Cuse stroke='%23000066' href='%23a' transform='rotate(70 0 0) scale(1.7)'/%3E%3Cuse stroke='%23000077' href='%23a' transform='rotate(80 0 0) scale(1.8)'/%3E%3Cuse stroke='%23000088' href='%23a' transform='rotate(90 0 0) scale(1.9)'/%3E%3Cuse stroke='%23000099' href='%23a' transform='rotate(100 0 0) scale(2)'/%3E%3Cuse stroke='%230000aa' href='%23a' transform='rotate(110 0 0) scale(2.1)'/%3E%3Cuse stroke='%230000bb' href='%23a' transform='rotate(120 0 0) scale(2.2)'/%3E%3Cuse stroke='%230000cc' href='%23a' transform='rotate(130 0 0) scale(2.3)'/%3E%3Cuse stroke='%230000dd' href='%23a' transform='rotate(140 0 0) scale(2.4)'/%3E%3Cuse stroke='%230000ee' href='%23a' transform='rotate(150 0 0) scale(2.5)'/%3E%3Cuse stroke='%2300F' href='%23a' transform='rotate(160 0 0) scale(2.6)'/%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
		background-attachment: fixed;
		background-size: cover;
	}
</style>

<center><h1>Tic Tac Toe</h1></center>
<div class="row" style="background-color: #c4e2f9 ">
	<div class="board" style="margin:10px auto;">
		@foreach (int i in new[] { 0, 1, 2, })
		{
			@foreach (int j in new[] { 0, 1, 2, })
			{
				<button class="cell" @onclick="() => { ClickCell(i, j); StateHasChanged(); }">@Board[i, j]</button>
			}
		}
	</div>
</div>
<div class="row">
	<button class="btn btn-primary" @onclick="() => { _board = GenerateBoard(); StateHasChanged(); }">New Game</button>
</div>
<div class="d-flex justify-content-center" style="display:@gameoverstring">
	Game Over! @WinnerString! Press "New Game" play again.
</div>
<div class="alert alert-dismissible alert-secondary">
	<strong>Rules:</strong>
	Take turns with the computer selecting tiles to place your marker. The first player to get three tiles in a row wins.
</div>

<style>

	.cell {
		background-color: #3d8fe6;
		font-size: 1rem;
		text-align: center;
		width: 2rem;
		height: 2rem;
		outline: none !important;
		border-style: solid;
	}

	.board {
		display: grid;
		grid-template-columns: auto auto auto;
		background-color: #333;
		width: auto;
		height: auto;
		column-gap: .25rem;
		row-gap: .25rem;
		padding: .5rem;
		float: left;
	}

	.btn-primary {
		margin-top: .5rem;
	}
</style>

@code
{
	char winner = default;
	bool matchOver = false;
	bool playerTurn = true;
	Random random = new Random();
	string WinnerString => winner == default ? "Draw" : winner + " Wins";
	string gameoverstring => matchOver ? "block" : "none";
	char[,] _board;
	char[,] Board => _board ?? (_board = GenerateBoard());

	char[,] GenerateBoard()
	{
		matchOver = false;
		char[,] board = new char[3, 3]
		{
			{ ' ', ' ', ' ', },
			{ ' ', ' ', ' ', },
			{ ' ', ' ', ' ', },
		};
		if (!playerTurn)
		{
			AiMove(board);
		}
		playerTurn = !playerTurn;
		return board;
	}

	void ClickCell(int i, int j)
	{
		if (!matchOver && Board[i, j] is ' ')
		{
			Board[i, j] = 'X';
			if (CheckForThree(Board, 'X'))
			{
				matchOver = true;
				winner = 'X';
			}
			else if (CheckForFullBoard(Board))
			{
				matchOver = true;
				winner = default;
			}
			else
			{
				AiMove(Board);
			}
		}
	}

	void AiMove(char[,] board)
	{
		var possibleMoves = new List<(int X, int Y)>();
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (board[i, j] == ' ')
				{
					possibleMoves.Add((i, j));
				}
			}
		}
		int index = random.Next(0, possibleMoves.Count);
		var (X, Y) = possibleMoves[index];
		board[X, Y] = 'O';
		if (CheckForThree(board, 'O'))
		{
			matchOver = true;
			winner = 'O';
		}
		else if (CheckForFullBoard(board))
		{
			matchOver = true;
			winner = default;
		}
	}

	bool CheckForThree(char[,] board, char c) =>
		board[0, 0] == c && board[1, 0] == c && board[2, 0] == c ||
		board[0, 1] == c && board[1, 1] == c && board[2, 1] == c ||
		board[0, 2] == c && board[1, 2] == c && board[2, 2] == c ||
		board[0, 0] == c && board[0, 1] == c && board[0, 2] == c ||
		board[1, 0] == c && board[1, 1] == c && board[1, 2] == c ||
		board[2, 0] == c && board[2, 1] == c && board[2, 2] == c ||
		board[0, 0] == c && board[1, 1] == c && board[2, 2] == c ||
		board[2, 0] == c && board[1, 1] == c && board[0, 2] == c;

	bool CheckForFullBoard(char[,] board) =>
				board[0, 0] != ' ' && board[1, 0] != ' ' && board[2, 0] != ' ' &&
				board[0, 1] != ' ' && board[1, 1] != ' ' && board[2, 1] != ' ' &&
				board[0, 2] != ' ' && board[1, 2] != ' ' && board[2, 2] != ' ';
}
